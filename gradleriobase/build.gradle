import org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier

plugins {
    id "java"
    id 'cpp'
    id "edu.wpi.first.GradleRIO"
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = 0
            debug = false

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployJavaArtifact = deploy.targets.roborio.artifacts.frcJava
def deployCppArtifact = deploy.targets.roborio.artifacts.frcCpp

wpi.java.debugJni = false

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.13.1'

    // simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
    // simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, true)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, true)

    // commands
    implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:${wpi.versions.wpilibVersion.get()}"
    if (project(":").ext.buildClassifier == 'Windows32') {
        implementation "edu.wpi.first.msvc:runtime:${project(':gradleriobase').wpi.versions.wpilibVersion.get()}:x86@zip"
    } else if (project(":").ext.buildClassifier == 'Windows64') {
        implementation "edu.wpi.first.msvc:runtime:${project(':gradleriobase').wpi.versions.wpilibVersion.get()}:x64@zip"
    }
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

wpi.sim.addGui()
wpi.sim.addDriverstation()
wpi.sim.addWebsocketsServer().defaultEnabled = true
wpi.sim.addWebsocketsClient().defaultEnabled = true

deployJavaArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            deployCppArtifact.component = it
            wpi.cpp.enableExternalTasks(it)

            // Defining the dependencies.
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)

            wpi.cpp.deps.useLibrary(it, 'wpilib_new_commands_shared')
            wpi.cpp.deps.useLibrary(it, 'wpilib_old_commands_shared')
        }
        // frcUserProgramStatic(NativeExecutableSpec) {
        //     targetPlatform wpi.platforms.roborio
        //     targetPlatform wpi.platforms.desktop

        //     // Defining the dependencies.
        //     wpi.cpp.deps.wpilibStatic(it)
        //     wpi.cpp.deps.googleTest(it)

        //     wpi.cpp.deps.useLibrary(it, 'wpilib_new_commands_static')
        //     wpi.cpp.deps.useLibrary(it, 'wpilib_old_commands_static')
        // }
    }
}

def getConfig = { configs, deps->
    configs.each { config->
        if (config.canBeResolved) {
            config.resolvedConfiguration.resolvedArtifacts.each {
                def item = [:];
                item['classifier'] = it.classifier
                item['extension'] = it.extension
                def id = it.moduleVersion.id
                item['groupId'] = id.group
                item['version'] = id.version
                item['artifactId'] = id.name
                deps << item
            }
            def componentIds = config.incoming.resolutionResult.allDependencies.collect { it.selected.id }
            def result = dependencies.createArtifactResolutionQuery()
                                     .forComponents(componentIds)
                                     .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
                                     .execute()

            for (component in result.resolvedComponents) {
                component.getArtifacts(SourcesArtifact).each {

                    def item = [:];
                    item['classifier'] = 'sources'
                    item['extension'] = 'jar'
                    def id = it.id.componentIdentifier
                    item['groupId'] = id.group
                    item['version'] = id.version
                    item['artifactId'] = id.module
                    deps << item

                }
                component.getArtifacts(JavadocArtifact).each {
                                        def item = [:];
                    item['classifier'] = 'javadoc'
                    item['extension'] = 'jar'
                    def id = it.id.componentIdentifier
                    item['groupId'] = id.group
                    item['version'] = id.version
                    item['artifactId'] = id.module
                    deps << item
                }
            }
        }
    }
}

repositories {
    gradlePluginPortal()
    mavenLocal()
}

ext.getGradleRioUrls = {
    Set urls = [];

    repositories.each {
        urls << it.url
    }

    return urls
}

ext.getGradleRioDependencies = {
    def output = [:]
    Set deps = []

    getConfig(configurations, deps)
    getConfig(buildscript.configurations, deps)

    buildscript.configurations.each { config ->
        config.allDependencies.each {
            def item = [:];
            item['groupId'] = it.group
            item['version'] = it.version
            item['artifactId'] = it.name
            item['extension'] = 'pom'
            deps << item
        }
    }

    output['deps'] = deps

    return output
}
