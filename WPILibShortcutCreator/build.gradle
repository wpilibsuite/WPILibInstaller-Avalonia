/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-application plugin to add support for building C++ executables
    id 'cpp-application'

    id 'visual-studio'
}

tasks.withType(CppCompile).configureEach {
    compilerArgs.add '/std:c++17'
    compilerArgs.add '/permissive-'

    macros.put("UNICODE", null)
}

// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.windows.x86_64)

    // Add support for windows resources
binaries.whenElementFinalized { binary ->
        def compileResources = tasks.register("compileResources${binary.name.capitalize()}", WindowsResourceCompile) {
            targetPlatform = binary.compileTask.get().targetPlatform
            toolChain = binary.toolChain
            includes.from file("src/main/headers")
            source.from fileTree(dir: "src/main/rc", includes: ["**/*.rc"])
            compilerArgs.addAll toolChain.map({ NativeToolChain toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return ["/v"]
                }
                return []
            }).get()
            it.outputDir = layout.buildDirectory.dir("windows-resources/${binary.name}").get().asFile
        }

        binary.linkTask.get().configure {
            dependsOn compileResources
            source.from compileResources.map({ return fileTree(dir: it.outputDir, includes: ["**/*.res","**/*.obj"]) })

            linkerArgs.addAll toolChain.map { NativeToolChain toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return ["user32.lib"]
                }
                return []
            }
        }
    }
}


