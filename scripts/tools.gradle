def toolsJson = file("$buildDir/tools.json")
def scriptBaseFile = file("files/ScriptBase.vbs")
def scriptBasePythonFile = file("files/ScriptBase.py")
def scriptBaseUnixFile = file("files/ScriptBase.sh")

def scriptBaseCppFile = file("files/ScriptBaseCpp.vbs")
def scriptBaseCppPythonFile = file("files/ScriptBaseCpp.py")
def scriptBaseCppUnixFile = file("files/ScriptBaseCpp.sh")

def advantageScopeScriptFile = file("files/AdvantageScope.vbs")
def advantageScopeScriptPythonFile = file("files/AdvantageScope.py")
def advantageScopeScriptUnixFile = file("files/AdvantageScope.sh")

def toolsJsonTask = tasks.register('toolsJson', Task) {

  dependsOn tasks.named('lazyModelEvaluation')

  doLast {
    def resolvedDeps = configurations.tools.resolvedConfiguration.resolvedArtifacts.toList()
    def config = []
    resolvedDeps.each {
      def item = [:]
      item['name'] = it.name
      item['version'] = it.moduleVersion.id.version
      def artif = [:]
      artif['classifier'] = it.classifier
      artif['extension'] = it.extension
      def id = it.moduleVersion.id
      artif['groupId'] = id.group
      artif['version'] = id.version
      artif['artifactId'] = id.name
      item['artifact'] = artif
      item['cpp'] = false
      config << item
    }

    def resolvedCppDeps = configurations.cppTools.resolvedConfiguration.resolvedArtifacts.toList()
    resolvedCppDeps.each {
      def item = [:]
      item['name'] = it.name
      item['version'] = it.moduleVersion.id.version
      def artif = [:]
      artif['classifier'] = it.classifier
      artif['extension'] = it.extension
      def id = it.moduleVersion.id
      artif['groupId'] = id.group
      artif['version'] = id.version
      artif['artifactId'] = id.name
      item['artifact'] = artif
      item['cpp'] = true
      config << item
    }

    def advantageScopeItem = [:]
    advantageScopeItem['name'] = "AdvantageScope"
    advantageScopeItem['version'] = advantagescopeGitTag
    config << advantageScopeItem

    def choreoItem = [:]
    choreoItem['name'] = "Choreo"
    choreoItem['version'] = choreoGitTag
    config << choreoItem

    def gbuilder = getGsonBuilder()
    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    toolsJson.parentFile.mkdirs()
    toolsJson.text = json
  }
}

ext.toolsConfig = {
  def toolsFolder = 'tools'
  return new Tuple2({ task->
    task.inputs.property 'toolsFolder', toolsFolder
  }, { config->
    def tools = [:]
    tools['Folder'] = toolsFolder
    tools['UpdaterJar'] = 'ToolsUpdater.jar'
    config['Tools'] = tools
  })
}

ext.toolsSetup = { AbstractArchiveTask zip->
  zip.dependsOn toolsJsonTask
  zip.inputs.file toolsJson
  zip.inputs.file scriptBaseFile
  zip.inputs.file scriptBaseUnixFile
  zip.inputs.file scriptBasePythonFile

  zip.from (toolsJson) {
    into '/tools'
  }

  if (project.ext.buildClassifier == 'Windows') {
    zip.from (scriptBaseFile) {
      into '/tools'
    }

    zip.from (scriptBaseCppFile) {
      into '/tools'
    }

    zip.from (advantageScopeScriptFile) {
      into '/tools'
    }
  } else {
    zip.from (scriptBaseUnixFile) {
      into '/tools'
      fileMode 0755
    }

    zip.from (scriptBasePythonFile) {
      into '/tools'
      fileMode 0755
    }

    zip.from (scriptBaseCppUnixFile) {
      into '/tools'
      fileMode 0755
    }

    zip.from (scriptBaseCppPythonFile) {
      into '/tools'
      fileMode 0755
    }

    zip.from (advantageScopeScriptUnixFile) {
      into '/tools'
      fileMode 0755
    }

    zip.from (advantageScopeScriptPythonFile) {
      into '/tools'
      fileMode 0755
    }
  }

}
