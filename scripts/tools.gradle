def toolsJson = file("$buildDir/tools.json")

def toolsJsonTask = tasks.register('toolsJson', Task) {

  dependsOn tasks.named('lazyModelEvaluation')

  doLast {
    def resolvedCppDeps = configurations.cppTools.resolvedConfiguration.resolvedArtifacts.toList()
    def config = []
    resolvedCppDeps.each {
      def item = [:]
      item['name'] = it.name
      item['version'] = it.moduleVersion.id.version
      def artif = [:]
      artif['classifier'] = it.classifier
      artif['extension'] = it.extension
      def id = it.moduleVersion.id
      artif['groupId'] = id.group
      artif['version'] = id.version
      artif['artifactId'] = id.name
      item['artifact'] = artif
      item['cpp'] = true
      config << item
    }

    def resolvedDeps = configurations.tools.resolvedConfiguration.resolvedArtifacts.toList()
    resolvedDeps.each {
      def item = [:]
      item['name'] = it.name
      item['version'] = it.moduleVersion.id.version
      def artif = [:]
      artif['classifier'] = it.classifier
      artif['extension'] = it.extension
      def id = it.moduleVersion.id
      artif['groupId'] = id.group
      artif['version'] = id.version
      artif['artifactId'] = id.name
      item['artifact'] = artif
      item['cpp'] = false
      config << item
    }

    def advantageScopeItem = [:]
    advantageScopeItem['name'] = "AdvantageScope"
    advantageScopeItem['version'] = advantagescopeGitTag
    config << advantageScopeItem

    def elasticItem = [:]
    elasticItem['name'] = "Elastic"
    elasticItem['version'] = elasticGitTag
    config << elasticItem

    def utilityItem = [:]
    utilityItem['name'] = "Utility"
    utilityItem['version'] = wpilibVersion
    config << utilityItem

    def gbuilder = getGsonBuilder()
    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    toolsJson.parentFile.mkdirs()
    toolsJson.text = json
  }
}

ext.toolsConfig = {
  def toolsFolder = 'tools'
  return new Tuple2({ task->
    task.inputs.property 'toolsFolder', toolsFolder
  }, { config->
    def tools = [:]
    tools['Folder'] = toolsFolder
    tools['UpdaterJar'] = 'ToolsUpdater.jar'
    config['Tools'] = tools
  })
}

ext.toolsSetup = { AbstractArchiveTask zip->
  zip.dependsOn toolsJsonTask
  zip.inputs.file toolsJson

  zip.from (toolsJson) {
    into '/tools'
  }

}
