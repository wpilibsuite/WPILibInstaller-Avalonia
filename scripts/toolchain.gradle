apply from: 'scripts/versions.gradle'

def baseUrl = "https://github.com/wpilibsuite/opensdk/releases/download/$toolchainGitTag/"

def fileNameWindows = "cortexa9_vfpv3-roborio-academic-2024-x86_64-w64-mingw32-Toolchain-${gccVersion}.zip"

def downloadUrlWindows = baseUrl + fileNameWindows

def fileNameMac = "cortexa9_vfpv3-roborio-academic-2024-x86_64-apple-darwin-Toolchain-${gccVersion}.tgz"

def downloadUrlMac = baseUrl + fileNameMac

def fileNameMacArm = "cortexa9_vfpv3-roborio-academic-2024-arm64-apple-darwin-Toolchain-${gccVersion}.tgz"

def downloadUrlMacArm = baseUrl + fileNameMacArm

def fileNameLinux = "cortexa9_vfpv3-roborio-academic-2024-x86_64-linux-gnu-Toolchain-${gccVersion}.tgz"

def downloadUrlLinux = baseUrl + fileNameLinux

def fileNameLinuxArm64 = "cortexa9_vfpv3-roborio-academic-2024-aarch64-bullseye-linux-gnu-Toolchain-${gccVersion}.tgz"

def downloadUrlLinuxArm64 = baseUrl + fileNameLinuxArm64

apply plugin: 'de.undercouch.download'

def downloadTaskWindows = tasks.register('downloadToolchainWindows', Download) {
  src downloadUrlWindows
  def fileName = file(src.file).name
  dest "$buildDir/downloads/$fileName"
  overwrite false
}

def downloadTaskMac = tasks.register('downloadToolchainMac', Download) {
  src downloadUrlMac
  def fileName = file(src.file).name
  dest "$buildDir/downloads/$fileName"
  overwrite false
}

def downloadTaskMacArm = tasks.register('downloadToolchainMacArm', Download) {
  src downloadUrlMacArm
  def fileName = file(src.file).name
  dest "$buildDir/downloads/$fileName"
  overwrite false
}

def downloadTaskLinux = tasks.register('downloadToolchainLinux', Download) {
  src downloadUrlLinux
  def fileName = file(src.file).name
  dest "$buildDir/downloads/$fileName"
  overwrite false
}

def downloadTaskLinuxArm64 = tasks.register('downloadToolchainLinuxArm64', Download) {
  src downloadUrlLinuxArm64
  def fileName = file(src.file).name
  dest "$buildDir/downloads/$fileName"
  overwrite false
}

ext.toolchainConfigTaskSetup = {
  return new Tuple2({ task->
    task.inputs.property 'toolchainName', fileNameWindows
  }, { config->
    def toolchainConfig = [:];

    toolchainConfig['Version'] = gccVersion
    toolchainConfig['Directory'] = 'roborio'

    config['CppToolchain'] = toolchainConfig
  });
}

def actualLinuxTask = null
if (project.hasProperty('linuxBuild')) {
  actualLinuxTask = downloadTaskLinux
} else if (project.hasProperty('linuxBuildArm64')) {
  actualLinuxTask = downloadTaskLinuxArm64
}

ext.toolchainZipSetup = { AbstractArchiveTask zip->
  if (actualLinuxTask != null) {
    zip.dependsOn actualLinuxTask

    zip.inputs.files actualLinuxTask.get().outputFiles

    zip.from(project.tarTree(project.resources.gzip(actualLinuxTask.get().outputFiles.first()))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }

  } else if (project.hasProperty('macBuild')) {
    zip.dependsOn downloadTaskMac

    zip.inputs.files downloadTaskMac.get().outputFiles

    zip.from(project.tarTree(project.resources.gzip(downloadTaskMac.get().outputFiles.first()))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  } else if (project.hasProperty('macBuildArm')) {
    zip.dependsOn downloadTaskMacArm

    zip.inputs.files downloadTaskMacArm.get().outputFiles

    zip.from(project.tarTree(project.resources.gzip(downloadTaskMacArm.get().outputFiles.first()))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  } else {
    zip.dependsOn downloadTaskWindows

    zip.inputs.files downloadTaskWindows.get().outputFiles

    zip.from(project.zipTree(downloadTaskWindows.get().outputFiles.first())) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  }
}
