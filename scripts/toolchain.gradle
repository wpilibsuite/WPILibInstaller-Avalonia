def gitTag = 'v2023-4'
def baseUrl = "https://github.com/wpilibsuite/opensdk/releases/download/$gitTag/"

def gccVersion = '12.1.0'

def fileNameWindows = "cortexa9_vfpv3-roborio-academic-2023-x86_64-w64-mingw32-Toolchain-${gccVersion}.zip"

def downloadUrlWindows = baseUrl + fileNameWindows
def fileWindows = file("$buildDir/$fileNameWindows")

def fileNameMac = "cortexa9_vfpv3-roborio-academic-2023-x86_64-apple-darwin-Toolchain-${gccVersion}.tgz"

def downloadUrlMac = baseUrl + fileNameMac
def fileMac = file("$buildDir/$fileNameMac")

def fileNameMacArm = "cortexa9_vfpv3-roborio-academic-2023-arm64-apple-darwin-Toolchain-${gccVersion}.tgz"

def downloadUrlMacArm = baseUrl + fileNameMacArm
def fileMacArm = file("$buildDir/$fileNameMacArm")

def fileNameLinux = "cortexa9_vfpv3-roborio-academic-2023-x86_64-linux-gnu-Toolchain-${gccVersion}.tgz"

def downloadUrlLinux = baseUrl + fileNameLinux
def fileLinux = file("$buildDir/$fileNameLinux")

apply plugin: 'de.undercouch.download'

def downloadTaskWindows = tasks.register('downloadToolchainWindows', Download) {
  src downloadUrlWindows
  dest buildDir
  overwrite false
}

def downloadTaskMac = tasks.register('downloadToolchainMac', Download) {
  src downloadUrlMac
  dest buildDir
  overwrite false
}

def downloadTaskMacArm = tasks.register('downloadToolchainMacArm', Download) {
  src downloadUrlMacArm
  dest buildDir
  overwrite false
}

def downloadTaskLinux = tasks.register('downloadToolchainLinux', Download) {
  src downloadUrlLinux
  dest buildDir
  overwrite false
}

ext.toolchainConfigTaskSetup = {
  return new Tuple2({ task->
    task.inputs.property 'toolchainName', fileNameWindows
  }, { config->
    def toolchainConfig = [:];

    toolchainConfig['Version'] = gccVersion
    toolchainConfig['Directory'] = 'roborio'

    config['CppToolchain'] = toolchainConfig
  });
}

ext.toolchainZipSetup = { AbstractArchiveTask zip->
  if (project.hasProperty('linuxBuild')) {
    zip.dependsOn downloadTaskLinux

    zip.inputs.file fileLinux

    zip.from(project.tarTree(project.resources.gzip(fileLinux))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }

  } else if (project.hasProperty('macBuild')) {
    zip.dependsOn downloadTaskMac

    zip.inputs.file fileMac

    zip.from(project.tarTree(project.resources.gzip(fileMac))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  } else if (project.hasProperty('macBuildArm')) {
    zip.dependsOn downloadTaskMacArm

    zip.inputs.file fileMacArm

    zip.from(project.tarTree(project.resources.gzip(fileMacArm))) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  } else {
    zip.dependsOn downloadTaskWindows

    zip.inputs.file fileWindows

    zip.from(project.zipTree(fileWindows)) {

      eachFile { f->
        f.path = f.path.replace('roborio-academic/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  }
}
