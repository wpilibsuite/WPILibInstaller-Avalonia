def gitTag = 'v2021-2'
def baseUrl = "https://github.com/wpilibsuite/roborio-toolchain/releases/download/$gitTag/"

def gccVersion = '7.3.0'

def fileName = 'FRC-2021-Windows-Toolchain-7.3.0.zip'

def downloadUrl = baseUrl + fileName
def fileWin = file("$buildDir/$fileName")

def fileNameMac = 'FRC-2021-Mac-Toolchain-7.3.0.tar.gz'

def downloadUrlMac = baseUrl + fileNameMac
def fileMac = file("$buildDir/$fileNameMac")

def fileNameLinux = 'FRC-2021-Linux-Toolchain-7.3.0.tar.gz'

def downloadUrlLinux = baseUrl + fileNameLinux
def fileLinux = file("$buildDir/$fileNameLinux")

apply plugin: 'de.undercouch.download'

def downloadTask = tasks.register('downloadToolchain', Download) {
  src downloadUrl
  dest buildDir
  overwrite false
}


def downloadTaskMac = tasks.register('downloadToolchainMac', Download) {
  src downloadUrlMac
  dest buildDir
  overwrite false
}

def downloadTaskLinux = tasks.register('downloadToolchainLinux', Download) {
  src downloadUrlLinux
  dest buildDir
  overwrite false
}

ext.toolchainConfigTaskSetup = {
  return new Tuple2({ task->
    task.inputs.property 'toolchainName', fileName
  }, { config->
    def toolchainConfig = [:];

    toolchainConfig['Version'] = gccVersion
    toolchainConfig['Directory'] = 'roborio'

    config['CppToolchain'] = toolchainConfig
  });
}

ext.toolchainZipSetup = { AbstractArchiveTask zip->
  if (project.hasProperty('linuxBuild')) {
    zip.dependsOn downloadTaskLinux

    zip.inputs.file fileLinux

    zip.from(project.tarTree(project.resources.gzip(fileLinux))) {

      eachFile { f->
        f.path = f.path.replace('frc2021/roborio/', 'roborio/')
      }

      includeEmptyDirs = false
    }

  } else if (project.hasProperty('macBuild')) {
    zip.dependsOn downloadTaskMac

    zip.inputs.file fileMac

    zip.from(project.tarTree(project.resources.gzip(fileMac))) {

      eachFile { f->
        f.path = f.path.replace('frc2021/roborio/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  } else {
    zip.dependsOn downloadTask

    zip.inputs.file fileWin

    zip.from(project.zipTree(fileWin)) {

      eachFile { f->
        f.path = f.path.replace('frc2021/roborio/', 'roborio/')
      }

      includeEmptyDirs = false
    }
  }
}
