
evaluationDependsOn(':gradleriobase')

apply plugin: 'de.undercouch.download'


def downloadLinuxJdk = tasks.register('downloadLinuxJdk', Download) {
  src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz'
  dest buildDir
  overwrite false
}

def jdkLinuxFile = file("$buildDir/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz")

def downloadMacJdk = tasks.register('downloadMacJdk', Download) {
  src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_mac_hotspot_17.0.4.1_1.tar.gz'
  dest buildDir
  overwrite false
}

def jdkMacFile = file("$buildDir/OpenJDK17U-jdk_x64_mac_hotspot_17.0.4.1_1.tar.gz")

def downloadMacArmJdk = tasks.register('downloadMacArmJdk', Download) {
  src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.4.1_1.tar.gz'
  dest buildDir
  overwrite false
}

def jdkMacArmFile = file("$buildDir/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.4.1_1.tar.gz")

def downloadWindowsJdk = tasks.register('downloadWindowsJdk', Download) {
  src 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_windows_hotspot_17.0.4.1_1.zip'
  dest buildDir
  overwrite false
}

def jdkWindowsFile = file("$buildDir/OpenJDK17U-jdk_x64_windows_hotspot_17.0.4.1_1.zip")

configurations {
  runtimex64
}

dependencies {
    if (project.ext.buildClassifier == 'Windows') {
        runtimex64 "edu.wpi.first.msvc:runtime:${project(':gradleriobase').wpi.versions.wpilibVersion}:x64@zip"
    }
}

def runtimeExtractTask = tasks.register('copyAndExtractRuntime', Copy) {
  into 'build/runtime'
  if (project.ext.buildClassifier == 'Windows') {
    from(project.zipTree(configurations.runtimex64.resolvedConfiguration.resolvedArtifacts.first().file))
  }
}

def jdkConfigFile = file("$buildDir/jdkconfig.json")

def jdkConfigFileTask = tasks.register("jdkConfigFile") {
  it.outputs.file jdkConfigFile

  doLast {

    def config = [:]
    config['folder'] = 'jdk'
    config['tarFile'] = 'jdk.tar.gz'

    def gbuilder = getGsonBuilder()

    gbuilder.setPrettyPrinting()
    def json = gbuilder.create().toJson(config)

    jdkConfigFile.parentFile.mkdirs()

    jdkConfigFile.text = json
  }
}

ext.jdkConfigFileSetup = { AbstractArchiveTask zip->
  zip.dependsOn jdkConfigFileTask
  zip.inputs.file jdkConfigFile

  zip.from(jdkConfigFile) {
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupWindows = { AbstractArchiveTask zip->
  zip.dependsOn downloadWindowsJdk
  zip.dependsOn jdkConfigFileTask
  zip.dependsOn runtimeExtractTask

  zip.inputs.file jdkWindowsFile
  zip.inputs.file jdkConfigFile

  zip.from(project.zipTree(jdkWindowsFile)) {

    eachFile { f->
      f.path = f.path.replace('jdk-17.0.4.1+1/', 'jdk/')
    }

    eachFile { f->
      file('build/runtime').eachFile {
        if (f.name.endsWith(it.name)) {
          f.exclude()
        }
      }
    }

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

  zip.from (runtimeExtractTask.get()) {
    into '/jdk/bin'
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupLinux = { AbstractArchiveTask zip->
  zip.dependsOn downloadLinuxJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdkLinuxFile
  zip.inputs.file jdkConfigFile

  zip.from(project.tarTree(project.resources.gzip(jdkLinuxFile))) {
    eachFile { f->
      f.path = f.path.replace('jdk-17.0.4.1+1/', 'jdk/')
    }

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

  zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupMac = { AbstractArchiveTask zip->
  zip.dependsOn downloadMacJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdkMacFile
  zip.inputs.file jdkConfigFile

  zip.from(project.tarTree(project.resources.gzip(jdkMacFile))) {
    eachFile { f ->
      f.path = f.path.replace('jdk-17.0.4.1+1/Contents/Home/', 'jdk/')
    }

    exclude './jdk-17.0.4.1+1/Contents/MacOS/**'
    exclude './jdk-17.0.4.1+1/Contents/Info.plist'

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetupMacArm = { AbstractArchiveTask zip->
  zip.dependsOn downloadMacArmJdk
  zip.dependsOn jdkConfigFileTask

  zip.inputs.file jdkMacArmFile
  zip.inputs.file jdkConfigFile

  zip.from(project.tarTree(project.resources.gzip(jdkMacArmFile))) {
    eachFile { f ->
      f.path = f.path.replace('jdk-17.0.4.1+1/Contents/Home/', 'jdk/')
    }

    exclude './jdk-17.0.4.1+1/Contents/MacOS/**'
    exclude './jdk-17.0.4.1+1/Contents/Info.plist'

    exclude '**/src.zip'
    exclude '**/bin/*.pdb'
    exclude '**/bin/*.map'
    exclude '**/bin/server/*.pdb'
    exclude '**/bin/server/*.map'
    exclude '**/demo/**'

    includeEmptyDirs = false
  }

    zip.from(jdkConfigFile) {
    into '/installUtils'
    rename {'jdkConfig.json'}
  }
}

ext.jdkZipSetup = { AbstractArchiveTask zip ->
  if (project.hasProperty('linuxBuild')) {
    jdkZipSetupLinux(zip)
  } else if (project.hasProperty('macBuild')) {
    jdkZipSetupMac(zip)
  } else if (project.hasProperty('macBuildArm')) {
    jdkZipSetupMacArm(zip)
  } else {
    jdkZipSetupWindows(zip)
  }
}
